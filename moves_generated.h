// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MOVES_MYNAMESPACE_H_
#define FLATBUFFERS_GENERATED_MOVES_MYNAMESPACE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MyNamespace {

struct Moves;
struct MovesBuilder;

struct Moves FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MovesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PID = 4,
    VT_DX = 6,
    VT_DY = 8
  };
  int32_t pid() const {
    return GetField<int32_t>(VT_PID, 0);
  }
  int32_t dx() const {
    return GetField<int32_t>(VT_DX, 0);
  }
  int32_t dy() const {
    return GetField<int32_t>(VT_DY, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PID, 4) &&
           VerifyField<int32_t>(verifier, VT_DX, 4) &&
           VerifyField<int32_t>(verifier, VT_DY, 4) &&
           verifier.EndTable();
  }
};

struct MovesBuilder {
  typedef Moves Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pid(int32_t pid) {
    fbb_.AddElement<int32_t>(Moves::VT_PID, pid, 0);
  }
  void add_dx(int32_t dx) {
    fbb_.AddElement<int32_t>(Moves::VT_DX, dx, 0);
  }
  void add_dy(int32_t dy) {
    fbb_.AddElement<int32_t>(Moves::VT_DY, dy, 0);
  }
  explicit MovesBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Moves> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Moves>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Moves> CreateMoves(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t pid = 0,
    int32_t dx = 0,
    int32_t dy = 0) {
  MovesBuilder builder_(_fbb);
  builder_.add_dy(dy);
  builder_.add_dx(dx);
  builder_.add_pid(pid);
  return builder_.Finish();
}

inline const MyNamespace::Moves *GetMoves(const void *buf) {
  return ::flatbuffers::GetRoot<MyNamespace::Moves>(buf);
}

inline const MyNamespace::Moves *GetSizePrefixedMoves(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MyNamespace::Moves>(buf);
}

inline bool VerifyMovesBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MyNamespace::Moves>(nullptr);
}

inline bool VerifySizePrefixedMovesBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MyNamespace::Moves>(nullptr);
}

inline void FinishMovesBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MyNamespace::Moves> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMovesBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MyNamespace::Moves> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace MyNamespace

#endif  // FLATBUFFERS_GENERATED_MOVES_MYNAMESPACE_H_
